AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'RESTFull Users API'

Parameters:
  ENVIRONMENT:
    Type: String
    Description: Set the runtime environment
    Default: 'prod'
  USERTABLENAME:
    Type: String
    Description: The DynamoDB table for storing Users information.
    Default: 'Users'
  REGIONNAME:
    Type: String
    Description: Default region for deployment.
    Default: 'us-east-2'
  LOGLEVEL:
    Type: String
    Description: Logger level
    Default: 'INFO'
  INGESTCSVDELIMITER:
    Type: String
    Description: CSV fields delimiter
    Default: ';'

Globals:
  Function:
    Runtime: python3.7
    Timeout: 20
    Environment:
      Variables:
        ENVIRONMENT: !Ref ENVIRONMENT
        REGION: !Ref REGIONNAME
        LOGLEVEL: !Ref LOGLEVEL
        USERTABLE: !Ref USERTABLENAME
        INGEST_CSV_DELIMITER: !Ref INGESTCSVDELIMITER

Resources:
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref USERTABLENAME
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  LISTUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'RESTFull API - GET Method to retrieve list of Users'
      CodeUri: .
      Handler: app.user.user_lambda.list_user
      Policies: AmazonDynamoDBFullAccess
      Events:
        UsersPOST:
          Type: Api
          Properties:
            Path: /users
            Method: GET

  POSTUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'RESTFull API - POST Method to create a new Users entity'
      CodeUri: .
      Handler: app.user.user_lambda.post_user
      Policies: AmazonDynamoDBFullAccess
      Events:
        UsersPOST:
          Type: Api
          Properties:
            Path: /users
            Method: POST

  GETUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'RESTFull API - GET Method to retrieve an Users entity'
      CodeUri: .
      Handler: app.user.user_lambda.get_user
      Policies: AmazonDynamoDBFullAccess
      Events:
        UsersPOST:
          Type: Api
          Properties:
            Path: /users/{id}
            Method: GET

  PUTUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'RESTFull API - PUT Method to update a complete Users entity'
      CodeUri: .
      Handler: app.user.user_lambda.put_user
      Policies: AmazonDynamoDBFullAccess
      Events:
        UsersPOST:
          Type: Api
          Properties:
            Path: /users/{id}
            Method: PUT

  DELETEUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'RESTFull API - DELETE Method to remove an Users entity'
      CodeUri: .
      Handler: app.user.user_lambda.delete_user
      Policies: AmazonDynamoDBFullAccess
      Events:
        UsersPOST:
          Type: Api
          Properties:
            Path: /users/{id}
            Method: DELETE

  INGESTUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Lambda function that ingest new CSV files on bucket gentem-bucket'
      CodeUri: .
      Handler: app.user.users_ingestion.ingest_users
      Policies:
        - AmazonS3FullAccess
        - AmazonDynamoDBFullAccess
    Events:
      CSVCreated:
        Type: S3
        Properties:
          Bucket: gentem-bucket
  LISTClaimFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'RESTFull API - GET Method to retrieve list of Claims'
      CodeUri: .
      Handler: app.claim.claim_lambda.list_claim
      Policies: AmazonDynamoDBFullAccess
      Events:
        UsersPOST:
          Type: Api
          Properties:
            Path: /claims
            Method: GET

  POSTClaimFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'RESTFull API - POST Method to create a new Claims entity'
      CodeUri: .
      Handler: app.claim.claim_lambda.post_claim
      Policies: AmazonDynamoDBFullAccess
      Events:
        UsersPOST:
          Type: Api
          Properties:
            Path: /claims
            Method: POST

  GETClaimFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'RESTFull API - GET Method to retrieve a Claim entity'
      CodeUri: .
      Handler: app.claim.claim_lambda.get_claim
      Policies: AmazonDynamoDBFullAccess
      Events:
        UsersPOST:
          Type: Api
          Properties:
            Path: /claims/{id}
            Method: GET

  LISTProviderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'RESTFull API - GET Method to retrieve list of Providers'
      CodeUri: .
      Handler: app.provider.provider_lambda.list_provider
      Policies: AmazonDynamoDBFullAccess
      Events:
        UsersPOST:
          Type: Api
          Properties:
            Path: /providers
            Method: GET

  POSTProviderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'RESTFull API - POST Method to create a new Providers entity'
      CodeUri: .
      Handler: app.provider.provider_lambda.post_provider
      Policies: AmazonDynamoDBFullAccess
      Events:
        UsersPOST:
          Type: Api
          Properties:
            Path: /providers
            Method: POST

  GETProviderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'RESTFull API - GET Method to retrieve a Provider entity'
      CodeUri: .
      Handler: app.provider.provider_lambda.get_provider
      Policies: AmazonDynamoDBFullAccess
      Events:
        UsersPOST:
          Type: Api
          Properties:
            Path: /providers/{id}
            Method: GET
  LISTProfileFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'RESTFull API - GET Method to retrieve list of Profile'
      CodeUri: .
      Handler: app.profile.profile_lambda.list_profile
      Policies: AmazonDynamoDBFullAccess
      Events:
        UsersPOST:
          Type: Api
          Properties:
            Path: /profiles
            Method: GET

  POSTProfileFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'RESTFull API - POST Method to create a new Profiles entity'
      CodeUri: .
      Handler: app.profile.profile_lambda.post_profile
      Policies: AmazonDynamoDBFullAccess
      Events:
        UsersPOST:
          Type: Api
          Properties:
            Path: /profiles
            Method: POST

  GETProfileFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'RESTFull API - GET Method to retrieve a Profile entity'
      CodeUri: .
      Handler: app.profile.profile_lambda.get_profile
      Policies: AmazonDynamoDBFullAccess
      Events:
        UsersPOST:
          Type: Api
          Properties:
            Path: /profiles/{id}
            Method: GET
